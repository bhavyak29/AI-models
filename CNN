import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.datasets import fashion_mnist
import numpy as np

#Link SSL certificates
import ssl
import certifi

ssl._create_default_https_context = lambda: ssl.create_default_context(cafile=certifi.where())

#Load the data
(train_images, train_labels),(test_images, test_labels)=fashion_mnist.load_data()
train_images[0]

#Change the data type of both train_image and test_image
train_images=train_images.astype(np.float32)
test_images=test_images.astype(np.float32)

#normalization
train_images=(train_images-0.0)/(255.0-0.0)
train_images.min()
train_images.max()

test_images=(test_images-0.0)/(255.0-0.0)
test_images.min()
test_images.max()

#add channel
train_images.shape

train_images=train_images.reshape(60000, 28, 28, 1)
train_images.shape

test_images=test_images.reshape(10000, 28, 28, 1)
test_images.shape

# Build CNN model
model = models.Sequential()

# Convolutional and pooling layers
model.add(layers.Conv2D(32, (3, 3), activation="relu", input_shape=train_images[0].shape))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation="relu"))
model.add(layers.MaxPooling2D((2, 2)))

# Flatten and dense layers
model.add(layers.Flatten())
model.add(layers.Dense(64, activation="relu"))
model.add(layers.Dense(10, activation="softmax"))  # 10 classes in Fashion MNIST

# Compile the model
model.compile(optimizer="adam",
              loss="sparse_categorical_crossentropy",  # for integer-labeled multi-class
              metrics=["accuracy"])

# Show model summary
model.summary()

model.fit(train_images, train_labels)
from tensorflow.keras.utils import to_categorical

# One-hot encode labels ONLY ONCE
train_labels = to_categorical(train_labels)  # shape becomes (num_samples, 10)
test_labels = to_categorical(test_labels)

# Compile model with correct loss for one-hot labels
model.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])

# Train model
model.fit(train_images, train_labels, epochs=1, validation_data=(test_images, test_labels))

test_pred=model.predict(test_images)
test_pred[0]

#classification report

from sklearn.metrics import classification_report
import pprint

test_pred= np.argmax(test_pred, axis=1)
test_pred=to_categorical(test_pred)

cr=classification_report(test_labels, test_pred)

pprint.pprint(cr)

