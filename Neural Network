import pandas as pd
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

#create neural network
import tensorflow as tf  

from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

df = pd.read_csv("/Users/bhavyakubba/Desktop/cardekho_data.csv")
df

df.info()

#data preprocessing, categorising the data
df["Year"]=2024-(df["Year"])

le=LabelEncoder()
df["Car_Name"]=le.fit_transform(df["Car_Name"])
df["Fuel_Type"]=le.fit_transform(df["Fuel_Type"])
df["Seller_Type"]=le.fit_transform(df["Seller_Type"])
df["Transmission"]=le.fit_transform(df["Transmission"])

X=df.drop("Seller_Type", axis=1)
y=df["Seller_Type"]

#apply standard scale to change the range of data

sc=StandardScaler()
#x=sc.fit_transform(X)

X_train, X_test, y_train, y_test= train_test_split(X, y, test_size=0.2, random_state=42)

#ANN model 

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.optimizers import Adam

model=Sequential()

model.add(Dense(32, input_dim=X_train.shape[1], activation="relu"))
model.add(Dense(1))

optimizer= Adam(learning_rate=0.001)
model.compile(optimizer=optimizer, loss="mean_squared_error",  # for integer-labeled multi-class
              metrics=["accuracy"])
model.fit(X_train, y_train)

y_pred=model.predict(X_test)
mse=mean_squared_error(y_pred, y_test)
mse

model.add(Dense(64, activation="relu"))
model.add(Flatten())

model.summary()
